
  /**
   * @license
   * author: undefined
   * modern-lang.js v0.0.1
   * Released under the undefined license.
   */

(function () {
  'use strict';

  /* parser generated by jison 0.4.18 */
  /*
    Returns a Parser object of the following structure:

    Parser: {
      yy: {}
    }

    Parser.prototype: {
      yy: {},
      trace: function(),
      symbols_: {associative list: name ==> number},
      terminals_: {associative list: number ==> name},
      productions_: [...],
      performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
      table: [...],
      defaultActions: {...},
      parseError: function(str, hash),
      parse: function(input),

      lexer: {
          EOF: 1,
          parseError: function(str, hash),
          setInput: function(input),
          input: function(),
          unput: function(str),
          more: function(),
          less: function(n),
          pastInput: function(),
          upcomingInput: function(),
          showPosition: function(),
          test_match: function(regex_match_array, rule_index),
          next: function(),
          lex: function(),
          begin: function(condition),
          popState: function(),
          _currentRules: function(),
          topState: function(),
          pushState: function(condition),

          options: {
              ranges: boolean           (optional: true ==> token location info will include a .range[] member)
              flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
              backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
          },

          performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
          rules: [...],
          conditions: {associative list: name ==> set},
      }
    }


    token location info (@$, _$, etc.): {
      first_line: n,
      last_line: n,
      first_column: n,
      last_column: n,
      range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
    }


    the parseError function receives a 'hash' object with these members for lexer and parser errors: {
      text:        (matched text)
      token:       (the produced terminal token, if any)
      line:        (yylineno)
    }
    while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
      loc:         (yylloc)
      expected:    (string describing the set of expected tokens)
      recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
    }
  */
  var parser = (function(){
  var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,8],$V2=[1,6],$V3=[1,16],$V4=[5,8,11,15],$V5=[1,21],$V6=[1,35],$V7=[1,29],$V8=[1,30],$V9=[1,32],$Va=[1,24],$Vb=[1,25],$Vc=[1,26],$Vd=[1,27],$Ve=[1,28],$Vf=[1,31],$Vg=[1,34],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[1,39],$Vl=[1,40],$Vm=[1,42],$Vn=[11,19,27],$Vo=[1,46],$Vp=[14,17],$Vq=[7,32],$Vr=[1,48],$Vs=[1,49],$Vt=[1,50],$Vu=[1,51],$Vv=[1,52],$Vw=[1,53],$Vx=[1,54],$Vy=[1,55],$Vz=[1,56],$VA=[1,57],$VB=[1,58],$VC=[1,59],$VD=[1,60],$VE=[1,61],$VF=[1,62],$VG=[1,63],$VH=[1,64],$VI=[1,65],$VJ=[1,66],$VK=[1,67],$VL=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,63,66],$VM=[7,9,11,12,14,17,21,22,24,26,28,29,30,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,63,64,66,68,69,70,71,72,73],$VN=[2,54],$VO=[17,66],$VP=[17,24],$VQ=[7,9,11,12,14,17,21,22,24,26,28,29,30,31,32,33,34,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,63,64,66,68,69,70,71,72,73],$VR=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,66],$VS=[1,105],$VT=[7,14,17,21,24,29,30,32,34,66],$VU=[7,14,17,21,24,29,30,32,34,38,39,40,66],$VV=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,66],$VW=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,43,44,45,46,66],$VX=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,43,44,45,46,47,48,66],$VY=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,66],$VZ=[7,14,17,21,24,29,30,32,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,66],$V_=[1,124],$V$=[1,123],$V01=[1,137],$V11=[11,24],$V21=[9,11,12,22,24,26,28,31,33,36,64,68,69,70,71,72,73],$V31=[9,24,62,68,69,70,71,72,73];
  var parser = {trace: function trace () { },
  yy: {},
  symbols_: {"error":2,"module":3,"module_stat_list":4,"EOF":5,"module_stat":6,";":7,"import":8,"STRING":9,"as":10,"NAME":11,"(":12,"name_list":13,")":14,"export":15,"binding":16,",":17,"argument_list":18,"=":19,"expr":20,"where":21,"{":22,"binding_list":23,"}":24,"atom":25,"\\":26,"->":27,"if":28,"than":29,"else":30,"let":31,"in":32,"case":33,"of":34,"case_of_list":35,"@":36,"do_stat_list":37,"$":38,"||":39,"&&":40,"==":41,"!=":42,">":43,"<":44,">=":45,"<=":46,"+":47,"-":48,"*":49,"/":50,"%":51,"**":52,"<<<":53,">>>":54,"<&":55,"&>":56,"do_stat":57,"<-":58,"case_of":59,"literal":60,":":61,"default":62,".":63,"[":64,"array_items":65,"]":66,"object_items":67,"NUMBER":68,"BOOLEAN":69,"NULL":70,"UNDEFINED":71,"RAWCODE":72,"REGEXP":73,"$accept":0,"$end":1},
  terminals_: {2:"error",5:"EOF",7:";",8:"import",9:"STRING",10:"as",11:"NAME",12:"(",14:")",15:"export",17:",",19:"=",21:"where",22:"{",24:"}",26:"\\",27:"->",28:"if",29:"than",30:"else",31:"let",32:"in",33:"case",34:"of",36:"@",38:"$",39:"||",40:"&&",41:"==",42:"!=",43:">",44:"<",45:">=",46:"<=",47:"+",48:"-",49:"*",50:"/",51:"%",52:"**",53:"<<<",54:">>>",55:"<&",56:"&>",58:"<-",61:":",62:"default",63:".",64:"[",66:"]",68:"NUMBER",69:"BOOLEAN",70:"NULL",71:"UNDEFINED",72:"RAWCODE",73:"REGEXP"},
  productions_: [0,[3,2],[3,1],[4,3],[4,2],[6,4],[6,5],[6,4],[6,1],[13,3],[13,1],[18,2],[18,1],[16,3],[16,4],[16,7],[16,8],[23,3],[23,2],[20,1],[20,4],[20,6],[20,4],[20,6],[20,5],[20,2],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[20,3],[37,3],[37,2],[57,2],[57,3],[57,1],[35,3],[35,2],[59,3],[59,3],[25,1],[25,3],[25,3],[25,3],[25,3],[25,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[65,3],[65,1],[65,0],[67,5],[67,3],[67,0]],
  performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
  /* this == yyval */

  var $0 = $$.length - 1;
  switch (yystate) {
  case 1:

        var module = AST.Module(
           $$[$0-1].filter(function(s){
             return (s instanceof AST.Module.Import || s instanceof AST.Module.ImportAs)
           }),
           $$[$0-1].filter(function(s){
             return (s instanceof AST.Module.Export)
           }),
           $$[$0-1].filter(function(s){
             return (s instanceof AST.Module.Binding)
           }));
        return compile(module);
  case 2:
   return '' 
  case 3:
   this.$ = $$[$0-2].concat([$$[$0-1]]); 
  break;
  case 4: case 18: case 46: case 51:
   this.$ = [$$[$0-1]]; 
  break;
  case 5:
   this.$ = AST.Module.ImportAs($$[$0-2], $$[$0]); 
  break;
  case 6:
   this.$ = AST.Module.Import($$[$0-3], $$[$0-1]); 
  break;
  case 7:
   this.$ = AST.Module.Export($$[$0-1]); 
  break;
  case 8:
   this.$ = AST.Module.Binding($$[$0]); 
  break;
  case 9: case 67:
   this.$ = $$[$0-2].concat($$[$0]); 
  break;
  case 10: case 12: case 68:
   this.$ = [$$[$0]]; 
  break;
  case 11:
   this.$ = $$[$0-1].concat($$[$0]); 
  break;
  case 13:
   this.$ = AST.Binding($$[$0-2], $$[$0]); 
  break;
  case 14:
   this.$ = AST.Binding($$[$0-3], $$[$0-2].reduceRight(function(expr, arg){
           return AST.Expr.Lam(arg, expr)}, $$[$0])); 
  break;
  case 15:
   this.$ = AST.Binding($$[$0-6], AST.Expr.LetIn($$[$0-3], $$[$0-4])); 
  break;
  case 16:
   this.$ = AST.Binding($$[$0-7], $$[$0-6].reduceRight(function(expr, arg){
           return AST.Expr.Lam(arg, expr)}, AST.Expr.LetIn($$[$0-1], $$[$0-4]))); 
  break;
  case 17: case 45: case 50:
   this.$ = $$[$0-2].concat($$[$0-1]); 
  break;
  case 19: case 59:
   this.$ = $$[$0]; 
  break;
  case 20:
   this.$ = $$[$0-2].reduceRight(function(expr, arg){
           return AST.Expr.Lam(arg, expr)}, $$[$0]); 
  break;
  case 21:
   this.$ = AST.Expr.IfElse($$[$0-4], $$[$0-2], $$[$0]); 
  break;
  case 22:
   this.$ = AST.Expr.LetIn([$$[$0-2]], $$[$0]); 
  break;
  case 23:
   this.$ = AST.Expr.CaseOf($$[$0-4], $$[$0-2]); 
  break;
  case 24:

        var last = $$[$0-1].slice(-1)[0];
        var init = $$[$0-1].slice(0,-1);
        if ( last.type !== 'call' ){
           parser.parseError('Parse error on line ' + (yylineno + 1) + ': The last statement in do block must be an expression' ,{});
        } else {
          if (init.length > 0){
            this.$ = init.reduceRight(function(expr, dostat){
              switch (dostat.type){
                case 'let':
                  return AST.Expr.LetIn([dostat.binding], expr)
                case 'ass':
                  return AST.Expr.App(
                        AST.Expr.App(AST.Expr.ID($$[$0-3]), dostat.expr),
                        AST.Expr.Lam(dostat.name, expr))
                case 'call':
                  return AST.Expr.App(
                        AST.Expr.App(AST.Expr.ID($$[$0-3]), dostat.expr),
                        AST.Expr.Lam('_', expr))
              }          }, AST.Expr.App(
              AST.Expr.App(AST.Expr.ID($$[$0-3]), last.expr)
              , AST.Expr.ID('NEXT$')));
            this.$ = AST.Expr.Lam('NEXT$', this.$);
          } else {
            this.$ = last.expr;
          }      }    
  break;
  case 25:
   this.$ = AST.Expr.App($$[$0-1], $$[$0]); 
  break;
  case 26:
   this.$ = AST.Expr.App($$[$0-2], $$[$0]); 
  break;
  case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 42:
   this.$ = AST.Expr.Op($$[$0-1], $$[$0-2], $$[$0]); 
  break;
  case 43:

        if ( $$[$0] instanceof AST.Expr.Array ){
           this.$ = AST.Expr.Call($$[$0-2], $$[$0]);
        }else {
           parser.parseError('Parse error on line ' + (yylineno + 1) + ': The left expr of op "<&" must be an array!' ,{});
        }    
  break;
  case 44:

        if ( $$[$0-2] instanceof AST.Expr.Array ){
           this.$ = AST.Expr.Call($$[$0], $$[$0-2]);
        }else {
           parser.parseError('Parse error on line ' + (yylineno + 1) + ': The right expr of op "<&" must be an array!' ,{});
        }    
  break;
  case 47:
   this.$ = {type:'let', binding:$$[$0]}; 
  break;
  case 48:
   this.$ = {type:'ass', name:$$[$0-2], expr:$$[$0]}; 
  break;
  case 49:
   this.$ = {type:'call', expr:$$[$0]}; 
  break;
  case 52:
   this.$ = AST.Expr.CaseOf.Case($$[$0-2], $$[$0]); 
  break;
  case 53:
   this.$ = AST.Expr.CaseOf.Case(AST.Expr.Val('DEFAULT', 'default'), $$[$0]); 
  break;
  case 54:
   this.$ = AST.Expr.ID($$[$0]); 
  break;
  case 55:
   this.$ = AST.Expr.Attr($$[$0-2], $$[$0]); 
  break;
  case 56:
   this.$ = $$[$0-1]; 
  break;
  case 57:
   this.$ = AST.Expr.Array($$[$0-1] || []); 
  break;
  case 58:
   this.$ = AST.Expr.Object($$[$0-1] || []); 
  break;
  case 60:
   this.$ = AST.Expr.Val('NUMBER', $$[$0]);
  break;
  case 61:
   this.$ = AST.Expr.Val('STRING', $$[$0]);
  break;
  case 62:
   this.$ = AST.Expr.Val('BOOLEAN', $$[$0]);
  break;
  case 63:
   this.$ = AST.Expr.Val('NULL', $$[$0]);
  break;
  case 64:
   this.$ = AST.Expr.Val('UNDEFINED', $$[$0]);
  break;
  case 65:
   this.$ = AST.Expr.Val('RAWCODE', $$[$0]);
  break;
  case 66:
   this.$ = AST.Expr.Val('REGEXP', $$[$0]);
  break;
  case 70:
   this.$ = $$[$0-4].concat([Expr.Object.KeyValue($$[$0-2], $$[$0])]); 
  break;
  case 71:
   this.$ = [Expr.Object.KeyValue($$[$0-2], $$[$0])]; 
  break;
  }
  },
  table: [{3:1,4:2,5:[1,3],6:4,8:$V0,11:$V1,15:$V2,16:7},{1:[3]},{5:[1,9],6:10,8:$V0,11:$V1,15:$V2,16:7},{1:[2,2]},{7:[1,11]},{9:[1,12]},{12:[1,13]},{7:[2,8]},{11:$V3,18:15,19:[1,14]},{1:[2,1]},{7:[1,17]},o($V4,[2,4]),{10:[1,18],12:[1,19]},{11:$V5,13:20},{9:$V6,11:$V7,12:$V8,20:22,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{11:$Vm,19:[1,41]},o($Vn,[2,12]),o($V4,[2,3]),{11:[1,43]},{11:$V5,13:44},{14:[1,45],17:$Vo},o($Vp,[2,10]),o($Vq,[2,13],{21:[1,47],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VL,[2,19],{25:23,60:33,20:68,9:$V6,11:$V7,12:$V8,22:$V9,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl}),{11:$V3,18:69},{9:$V6,11:$V7,12:$V8,20:70,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{11:$V1,16:71},{9:$V6,11:$V7,12:$V8,20:72,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{11:[1,73]},o($VM,$VN),{9:$V6,11:$V7,12:$V8,20:74,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},o($VO,[2,69],{25:23,60:33,65:75,20:76,9:$V6,11:$V7,12:$V8,22:$V9,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl}),o($VP,[2,72],{67:77,11:[1,78]}),o($VM,[2,59]),o($VQ,[2,60]),o($VQ,[2,61]),o($VQ,[2,62]),o($VQ,[2,63]),o($VQ,[2,64]),o($VQ,[2,65]),o($VQ,[2,66]),{9:$V6,11:$V7,12:$V8,20:79,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},o($Vn,[2,11]),{7:[2,5]},{14:[1,80],17:$Vo},{7:[2,7]},{11:[1,81]},{22:[1,82]},{9:$V6,11:$V7,12:$V8,20:83,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:84,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:85,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:86,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:87,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:88,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:89,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:90,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:91,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:92,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:93,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:94,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:95,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:96,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:97,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:98,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:99,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:100,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:101,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{11:[1,102]},o($VR,[2,25],{63:$VK}),{11:$Vm,27:[1,103]},{29:[1,104],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK},{32:$VS},{34:[1,106],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK},{22:[1,107]},{14:[1,108],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK},{17:[1,110],66:[1,109]},o($VO,[2,68],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),{17:[1,112],24:[1,111]},{61:[1,113]},o($Vq,[2,14],{21:[1,114],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),{7:[2,6]},o($Vp,[2,9]),{11:$V1,16:116,23:115},o($VT,[2,26],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VU,[2,27],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VU,[2,28],{41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VV,[2,29],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VV,[2,30],{43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VW,[2,31],{47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VW,[2,32],{47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VW,[2,33],{47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VW,[2,34],{47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VX,[2,35],{49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VX,[2,36],{49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VY,[2,37],{53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VY,[2,38],{53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VY,[2,39],{53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VY,[2,40],{53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VZ,[2,41],{55:$VI,56:$VJ,63:$VK}),o($VZ,[2,42],{55:$VI,56:$VJ,63:$VK}),o($VR,[2,43],{63:$VK}),o($VR,[2,44],{63:$VK}),o($VM,[2,55]),{9:$V6,11:$V7,12:$V8,20:117,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:118,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:119,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{22:[1,120]},{9:$V6,11:$V_,12:$V8,20:125,22:$V9,25:23,26:$Va,28:$Vb,31:$V$,33:$Vd,36:$Ve,37:121,57:122,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},o($VM,[2,56]),o($VM,[2,57]),{9:$V6,11:$V7,12:$V8,20:126,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},o($VM,[2,58]),{11:[1,127]},{9:$V6,11:$V7,12:$V8,20:128,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{22:[1,129]},{11:$V1,16:131,24:[1,130]},{7:[1,132]},o($VT,[2,20],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),{30:[1,133],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK},o($VT,[2,22],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),{9:$V6,35:134,59:135,60:136,62:$V01,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V_,12:$V8,20:125,22:$V9,24:[1,138],25:23,26:$Va,28:$Vb,31:$V$,33:$Vd,36:$Ve,57:139,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{7:[1,140]},{11:$V1,16:141},o([7,9,11,12,22,26,28,31,33,36,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,63,64,68,69,70,71,72,73],$VN,{58:[1,142]}),{7:[2,49],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK},o($VO,[2,67],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),{61:[1,143]},o($VP,[2,71],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),{11:$V1,16:116,23:144},o($Vq,[2,15]),{7:[1,145]},o($V11,[2,18]),{9:$V6,11:$V7,12:$V8,20:146,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,24:[1,147],59:148,60:136,62:$V01,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{7:[1,149]},{61:[1,150]},{61:[1,151]},o($VL,[2,24]),{7:[1,152]},o($V21,[2,46]),{7:[2,47],32:$VS},{9:$V6,11:$V7,12:$V8,20:153,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:154,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{11:$V1,16:131,24:[1,155]},o($V11,[2,17]),o($VT,[2,21],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($VL,[2,23]),{7:[1,156]},o($V31,[2,51]),{9:$V6,11:$V7,12:$V8,20:157,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},{9:$V6,11:$V7,12:$V8,20:158,22:$V9,25:23,26:$Va,28:$Vb,31:$Vc,33:$Vd,36:$Ve,60:33,64:$Vf,68:$Vg,69:$Vh,70:$Vi,71:$Vj,72:$Vk,73:$Vl},o($V21,[2,45]),{7:[2,48],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK},o($VP,[2,70],{38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}),o($Vq,[2,16]),o($V31,[2,50]),{7:[2,52],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK},{7:[2,53],38:$Vr,39:$Vs,40:$Vt,41:$Vu,42:$Vv,43:$Vw,44:$Vx,45:$Vy,46:$Vz,47:$VA,48:$VB,49:$VC,50:$VD,51:$VE,52:$VF,53:$VG,54:$VH,55:$VI,56:$VJ,63:$VK}],
  defaultActions: {3:[2,2],7:[2,8],9:[2,1],43:[2,5],45:[2,7],80:[2,6]},
  parseError: function parseError (str, hash) {
      if (hash.recoverable) {
          this.trace(str);
      } else {
          var error = new Error(str);
          error.hash = hash;
          throw error;
      }
  },
  parse: function parse(input) {
      var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, TERROR = 2, EOF = 1;
      var args = lstack.slice.call(arguments, 1);
      var lexer = Object.create(this.lexer);
      var sharedState = { yy: {} };
      for (var k in this.yy) {
          if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
              sharedState.yy[k] = this.yy[k];
          }
      }
      lexer.setInput(input, sharedState.yy);
      sharedState.yy.lexer = lexer;
      sharedState.yy.parser = this;
      if (typeof lexer.yylloc == 'undefined') {
          lexer.yylloc = {};
      }
      var yyloc = lexer.yylloc;
      lstack.push(yyloc);
      var ranges = lexer.options && lexer.options.ranges;
      if (typeof sharedState.yy.parseError === 'function') {
          this.parseError = sharedState.yy.parseError;
      } else {
          this.parseError = Object.getPrototypeOf(this).parseError;
      }
      var lex = function () {
              var token;
              token = lexer.lex() || EOF;
              if (typeof token !== 'number') {
                  token = self.symbols_[token] || token;
              }
              return token;
          };
      var symbol, state, action, r, yyval = {}, p, len, newState, expected;
      while (true) {
          state = stack[stack.length - 1];
          if (this.defaultActions[state]) {
              action = this.defaultActions[state];
          } else {
              if (symbol === null || typeof symbol == 'undefined') {
                  symbol = lex();
              }
              action = table[state] && table[state][symbol];
          }
                      if (typeof action === 'undefined' || !action.length || !action[0]) {
                  var errStr = '';
                  expected = [];
                  for (p in table[state]) {
                      if (this.terminals_[p] && p > TERROR) {
                          expected.push('\'' + this.terminals_[p] + '\'');
                      }
                  }
                  if (lexer.showPosition) {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                  } else {
                      errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                  }
                  this.parseError(errStr, {
                      text: lexer.match,
                      token: this.terminals_[symbol] || symbol,
                      line: lexer.yylineno,
                      loc: yyloc,
                      expected: expected
                  });
              }
          if (action[0] instanceof Array && action.length > 1) {
              throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
          }
          switch (action[0]) {
          case 1:
              stack.push(symbol);
              vstack.push(lexer.yytext);
              lstack.push(lexer.yylloc);
              stack.push(action[1]);
              symbol = null;
              {
                  yyleng = lexer.yyleng;
                  yytext = lexer.yytext;
                  yylineno = lexer.yylineno;
                  yyloc = lexer.yylloc;
              }
              break;
          case 2:
              len = this.productions_[action[1]][1];
              yyval.$ = vstack[vstack.length - len];
              yyval._$ = {
                  first_line: lstack[lstack.length - (len || 1)].first_line,
                  last_line: lstack[lstack.length - 1].last_line,
                  first_column: lstack[lstack.length - (len || 1)].first_column,
                  last_column: lstack[lstack.length - 1].last_column
              };
              if (ranges) {
                  yyval._$.range = [
                      lstack[lstack.length - (len || 1)].range[0],
                      lstack[lstack.length - 1].range[1]
                  ];
              }
              r = this.performAction.apply(yyval, [
                  yytext,
                  yyleng,
                  yylineno,
                  sharedState.yy,
                  action[1],
                  vstack,
                  lstack
              ].concat(args));
              if (typeof r !== 'undefined') {
                  return r;
              }
              if (len) {
                  stack = stack.slice(0, -1 * len * 2);
                  vstack = vstack.slice(0, -1 * len);
                  lstack = lstack.slice(0, -1 * len);
              }
              stack.push(this.productions_[action[1]][0]);
              vstack.push(yyval.$);
              lstack.push(yyval._$);
              newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
              stack.push(newState);
              break;
          case 3:
              return true;
          }
      }
      return true;
  }};

      var AST = require('./SmoothAST');
      var compile = require('./SmoothCompiler');
  /* generated by jison-lex 0.3.4 */
  var lexer = (function(){
  var lexer = ({

  EOF:1,

  parseError:function parseError(str, hash) {
          if (this.yy.parser) {
              this.yy.parser.parseError(str, hash);
          } else {
              throw new Error(str);
          }
      },

  // resets the lexer, sets new input
  setInput:function (input, yy) {
          this.yy = yy || this.yy || {};
          this._input = input;
          this._more = this._backtrack = this.done = false;
          this.yylineno = this.yyleng = 0;
          this.yytext = this.matched = this.match = '';
          this.conditionStack = ['INITIAL'];
          this.yylloc = {
              first_line: 1,
              first_column: 0,
              last_line: 1,
              last_column: 0
          };
          if (this.options.ranges) {
              this.yylloc.range = [0,0];
          }
          this.offset = 0;
          return this;
      },

  // consumes and returns one char from the input
  input:function () {
          var ch = this._input[0];
          this.yytext += ch;
          this.yyleng++;
          this.offset++;
          this.match += ch;
          this.matched += ch;
          var lines = ch.match(/(?:\r\n?|\n).*/g);
          if (lines) {
              this.yylineno++;
              this.yylloc.last_line++;
          } else {
              this.yylloc.last_column++;
          }
          if (this.options.ranges) {
              this.yylloc.range[1]++;
          }

          this._input = this._input.slice(1);
          return ch;
      },

  // unshifts one char (or a string) into the input
  unput:function (ch) {
          var len = ch.length;
          var lines = ch.split(/(?:\r\n?|\n)/g);

          this._input = ch + this._input;
          this.yytext = this.yytext.substr(0, this.yytext.length - len);
          //this.yyleng -= len;
          this.offset -= len;
          var oldLines = this.match.split(/(?:\r\n?|\n)/g);
          this.match = this.match.substr(0, this.match.length - 1);
          this.matched = this.matched.substr(0, this.matched.length - 1);

          if (lines.length - 1) {
              this.yylineno -= lines.length - 1;
          }
          var r = this.yylloc.range;

          this.yylloc = {
              first_line: this.yylloc.first_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.first_column,
              last_column: lines ?
                  (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                   + oldLines[oldLines.length - lines.length].length - lines[0].length :
                this.yylloc.first_column - len
          };

          if (this.options.ranges) {
              this.yylloc.range = [r[0], r[0] + this.yyleng - len];
          }
          this.yyleng = this.yytext.length;
          return this;
      },

  // When called from action, caches matched text and appends it on next action
  more:function () {
          this._more = true;
          return this;
      },

  // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
  reject:function () {
          if (this.options.backtrack_lexer) {
              this._backtrack = true;
          } else {
              return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                  text: "",
                  token: null,
                  line: this.yylineno
              });

          }
          return this;
      },

  // retain first n characters of the match
  less:function (n) {
          this.unput(this.match.slice(n));
      },

  // displays already matched input, i.e. for error messages
  pastInput:function () {
          var past = this.matched.substr(0, this.matched.length - this.match.length);
          return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
      },

  // displays upcoming input, i.e. for error messages
  upcomingInput:function () {
          var next = this.match;
          if (next.length < 20) {
              next += this._input.substr(0, 20-next.length);
          }
          return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
      },

  // displays the character position where the lexing error occurred, i.e. for error messages
  showPosition:function () {
          var pre = this.pastInput();
          var c = new Array(pre.length + 1).join("-");
          return pre + this.upcomingInput() + "\n" + c + "^";
      },

  // test the lexed token: return FALSE when not a match, otherwise return token
  test_match:function(match, indexed_rule) {
          var token,
              lines,
              backup;

          if (this.options.backtrack_lexer) {
              // save context
              backup = {
                  yylineno: this.yylineno,
                  yylloc: {
                      first_line: this.yylloc.first_line,
                      last_line: this.last_line,
                      first_column: this.yylloc.first_column,
                      last_column: this.yylloc.last_column
                  },
                  yytext: this.yytext,
                  match: this.match,
                  matches: this.matches,
                  matched: this.matched,
                  yyleng: this.yyleng,
                  offset: this.offset,
                  _more: this._more,
                  _input: this._input,
                  yy: this.yy,
                  conditionStack: this.conditionStack.slice(0),
                  done: this.done
              };
              if (this.options.ranges) {
                  backup.yylloc.range = this.yylloc.range.slice(0);
              }
          }

          lines = match[0].match(/(?:\r\n?|\n).*/g);
          if (lines) {
              this.yylineno += lines.length;
          }
          this.yylloc = {
              first_line: this.yylloc.last_line,
              last_line: this.yylineno + 1,
              first_column: this.yylloc.last_column,
              last_column: lines ?
                           lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                           this.yylloc.last_column + match[0].length
          };
          this.yytext += match[0];
          this.match += match[0];
          this.matches = match;
          this.yyleng = this.yytext.length;
          if (this.options.ranges) {
              this.yylloc.range = [this.offset, this.offset += this.yyleng];
          }
          this._more = false;
          this._backtrack = false;
          this._input = this._input.slice(match[0].length);
          this.matched += match[0];
          token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
          if (this.done && this._input) {
              this.done = false;
          }
          if (token) {
              return token;
          } else if (this._backtrack) {
              // recover context
              for (var k in backup) {
                  this[k] = backup[k];
              }
              return false; // rule action called reject() implying the next rule should be tested instead.
          }
          return false;
      },

  // return next match in input
  next:function () {
          if (this.done) {
              return this.EOF;
          }
          if (!this._input) {
              this.done = true;
          }

          var token,
              match,
              tempMatch,
              index;
          if (!this._more) {
              this.yytext = '';
              this.match = '';
          }
          var rules = this._currentRules();
          for (var i = 0; i < rules.length; i++) {
              tempMatch = this._input.match(this.rules[rules[i]]);
              if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                  match = tempMatch;
                  index = i;
                  if (this.options.backtrack_lexer) {
                      token = this.test_match(tempMatch, rules[i]);
                      if (token !== false) {
                          return token;
                      } else if (this._backtrack) {
                          match = false;
                          continue; // rule action called reject() implying a rule MISmatch.
                      } else {
                          // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                          return false;
                      }
                  } else if (!this.options.flex) {
                      break;
                  }
              }
          }
          if (match) {
              token = this.test_match(match, rules[index]);
              if (token !== false) {
                  return token;
              }
              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
              return false;
          }
          if (this._input === "") {
              return this.EOF;
          } else {
              return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                  text: "",
                  token: null,
                  line: this.yylineno
              });
          }
      },

  // return next match that has a token
  lex:function lex () {
          var r = this.next();
          if (r) {
              return r;
          } else {
              return this.lex();
          }
      },

  // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
  begin:function begin (condition) {
          this.conditionStack.push(condition);
      },

  // pop the previously active lexer condition state off the condition stack
  popState:function popState () {
          var n = this.conditionStack.length - 1;
          if (n > 0) {
              return this.conditionStack.pop();
          } else {
              return this.conditionStack[0];
          }
      },

  // produce the lexer rule set which is active for the currently active lexer condition state
  _currentRules:function _currentRules () {
          if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
              return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
          } else {
              return this.conditions["INITIAL"].rules;
          }
      },

  // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
  topState:function topState (n) {
          n = this.conditionStack.length - 1 - Math.abs(n || 0);
          if (n >= 0) {
              return this.conditionStack[n];
          } else {
              return "INITIAL";
          }
      },

  // alias for begin(condition)
  pushState:function pushState (condition) {
          this.begin(condition);
      },

  // return the number of states currently on the stack
  stateStackSize:function stateStackSize() {
          return this.conditionStack.length;
      },
  options: {},
  performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
  switch($avoiding_name_collisions) {
  case 0:return 5
  case 1:/** skip **/
  break;
  case 2:/** skip **/
  break;
  case 3: return yy_.yytext 
  case 4:return 68
  case 5:  
                                              // parseInt to convert to base-10
                                              var i = yy_.yytext.substr(2); // binary val
                                              yy_.yytext = parseInt(i,2).toString();
                                              return 68
  case 6:return 68
  case 7:return 69
  case 8:return 70
  case 9:return 71
  case 10:return 9
  case 11:return 73
  case 12:
                                            var str = yy_.yytext
                                                .substr(1, yy_.yytext.length-2);
                                            yy_.yytext = str;
                                            return 72
  case 13:return 11
  }
  },
  rules: [/^(?:$)/,/^(?:(([\ \t\f\n])+))/,/^(?:(#[^\n]*))/,/^(?:((as|case|of|if|than|else|import|let|in|where|break|continue|export|return|switch|while|default\b)\b|(=|->|<-|:|,|\\|@|;)|(\(|\)|\[|\]|\{|\})|(\.|<&|&>|<<<|>>>|\*|\/|%|\*\*|\+|->|<|>=|<=|==|!=|\|\||&&|\$)))/,/^(?:(((([0-9])+|((([0-9])*(\.([0-9])+))|(([0-9])+\.)))([e|E][\+|\-]([0-9])+))|((([0-9])*(\.([0-9])+))|(([0-9])+\.))))/,/^(?:(0[b|B](([0|1])+)))/,/^(?:((([1-9]([0-9])*))|(0[x|X](([0-9])|[a-fA-F])+)|(0[o|O]?([0-7])+)))/,/^(?:(true|false\b))/,/^(?:(null\b))/,/^(?:{undefined})/,/^(?:(("(([^\\\n\"])|(\\.))*")|('(([^\\\n\'])|(\\.))*')))/,/^(?:(\/([^\\\n\/]|(\\.))\/))/,/^(?:{rawcode})/,/^(?:((_|(([a-z])|([A-Z])))((([a-z])|([A-Z]))|([0-9])|_)*))/],
  conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"inclusive":true},"INCOMMENT":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13],"inclusive":true}}
  });
  return lexer;
  })();
  parser.lexer = lexer;
  function Parser () {
    this.yy = {};
  }
  Parser.prototype = parser;parser.Parser = Parser;
  return new Parser;
  })(); 
  const parse = parser.parse.bind(parser);
  parser.parse = parse;

  console.log(parse("Zeptop = `Zepto`"));

})();
